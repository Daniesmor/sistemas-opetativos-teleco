#include <stdio.h>
#include <stdlib.h>
#include <errno.h>
#include <string.h>
#include <err.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <stdint.h>
#include <sys/wait.h>

struct Cmp {
	char *files[2];
	int pid;
	int equal;
};
typedef struct Cmp Cmp;

struct Cmps {
	Cmp **arr;
	int elems;
};
typedef struct Cmps Cmps;

Cmp *
cmp(char *f1, char *f2)
{
	Cmp *c;

	c = malloc(sizeof(Cmp));
	c->files[0] = f1;
	c->files[1] = f2;
	c->equal = 0;
	switch (c->pid = fork()) {
	case -1:
		err(EXIT_FAILURE, "fork failed");
	case 0:
		execl("/bin/cmp", "cmp", "-s", f1, f2, NULL);
		err(EXIT_FAILURE, "exec failed");
	}
	return c;
}

int
waitcmp(Cmp *c)
{
	int sts;

	for (;;) {
		if (waitpid(c->pid, &sts, 0) == -1) {
			err(EXIT_FAILURE, "fatal: waitpid failed");
		}
		if (WIFEXITED(sts)) {
			if (WEXITSTATUS(sts) == 2) {
				return -1;
			}
			c->equal = WEXITSTATUS(sts) == 0;
			return 0;
		}
	}
}

int
waitresult(Cmps *cmps)
{
	int i;
	int ret = 0;

	for (i = 0; i < cmps->elems; i++) {
		if (waitcmp(cmps->arr[i]) == -1) {
			ret = -1;
		}
	}
	return ret;
}

int
ncomps(int x)
{
	int n = 0;

	while (--x > 0) {
		n += x;
	}
	return n;
}

Cmps *
mkcmps(char **files, int nfiles)
{
	Cmps *cmps;
	int i;
	int j;

	cmps = (Cmps *)malloc(sizeof(Cmps));
	if (cmps == NULL) {
		err(EXIT_FAILURE, "out of memory");
	}
	cmps->elems = 0;
	cmps->arr = (Cmp **)malloc(sizeof(Cmp *) * ncomps(nfiles));
	if (cmps->arr == NULL) {
		err(EXIT_FAILURE, "out of memory");
	}
	for (i = 0; i < nfiles - 1; i++) {
		for (j = i + 1; j < nfiles; j++) {
			cmps->arr[cmps->elems++] = cmp(files[i], files[j]);
		}
	}
	return cmps;
}

int
isequal(char *file, Cmp *c)
{
	return (strcmp(c->files[0], file) == 0 ||
		strcmp(c->files[1], file) == 0) && c->equal;
}

int
isunique(char *file, Cmps *cmps)
{
	int i;

	for (i = 0; i < cmps->elems; i++) {
		if (isequal(file, cmps->arr[i])) {
			return 0;
		}
	}
	return 1;
}

void
freecmps(Cmps *cmps)
{
	int i;

	for (i = 0; i < cmps->elems; i++) {
		free(cmps->arr[i]);
	}
	free(cmps->arr);
	free(cmps);
}

void
usage(void)
{
	fprintf(stderr, "usage: uniqfiles file1 file2 ...\n");
	exit(EXIT_FAILURE);
}

int
main(int argc, char *argv[])
{
	Cmps *cmps;
	int i;
	int sts = 0;

	argv++;
	argc--;
	if (argc == 0 || argc == 1) {
		exit(EXIT_SUCCESS);
	}
	cmps = mkcmps(argv, argc);
	if (waitresult(cmps) == -1) {
		usage();
	}
	for (i = 0; i < argc; i++) {
		if (isunique(argv[i], cmps)) {
			printf("%s\n", argv[i]);
		} else {
			sts = 1;
		}
	}
	freecmps(cmps);
	exit(sts);
}
